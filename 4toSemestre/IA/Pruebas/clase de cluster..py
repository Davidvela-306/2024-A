# -*- coding: utf-8 -*-
"""Copia de Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YHSEpnwgenXR2B7GSnAT9L6YfLdC21uf
"""

#cargar dataframe
import pandas as pd
datos=pd.read_csv('wine_cluster.csv')
print(datos.head())
print(datos.describe())

#borrar valores nulos
datos=datos.dropna()

#crear graficos de dispersion entre pares .vvisualizar la relacion
import seaborn as sns
sns.pairplot(datos)

#conjunto de caracteristicas
x=datos[['Alcohol','Color_Intensity']]
#normalizar los datos
x=(x-x.mean())/x.std()

#Grafico de dispersion
import matplotlib.pyplot as plt
plt.scatter(datos[['Alcohol',]],datos[['Color_Intensity']])
plt.show()

#Grafico de dispersion con datos normalizados
import matplotlib.pyplot as plt
plt.scatter(x[['Alcohol',]],x[['Color_Intensity']])
plt.show()

#calcular la inercia y la silueta para diferentes numero de clusters
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
k_valores=range(2,10)
inercias=[]
siluetas=[]
for k in k_valores:
  modelo=KMeans(k)
  modelo.fit(x)
  inercias.append(modelo.inertia_)
  silueta=silhouette_score(x,modelo.labels_)
  siluetas.append(silueta)
  #inercia es una metrica del cluster ,menor inercia =mejor modelo

#grafica del codo
plt.plot(k_valores,inercias)
plt.xlabel("numero cluster")
plt.ylabel("")
plt.show()

#grafica de las siluetas
plt.plot(k_valores,siluetas)
plt.xlabel("numero siluetas")
plt.ylabel("")
plt.show()

#crear el modelo
modelo =KMeans(4)
#entrenar el modelo
modelo.fit(x)

etiquetas=modelo.labels_
centroide=modelo.cluster_centers_
print(etiquetas)
print(centroide)

#grafica de dispersion  para mostrar resultados
grafica=plt.scatter(x[['Alcohol']],x[['Color_Intensity']],c=etiquetas,cmap='viridis')
plt.scatter(centroide[:,0],centroide[:,1],marker='x', color='red')
plt.xlabel('Alcohol')
plt.ylabel('Color_Intensity')

silueta=silhouette_score(x,modelo.labels_)
print("la silueta es :",silueta)
print("")

#crear una leyenda personalizada
handles, _ = grafica.legend_elements(prop="colors")
#cptura loe elemeros de  leyenda
legend_labels=[f"cluster {i}" for i in range(len(centroide))]
#creamos las etiquetas para la leyenda ,n apara cada cluster.basadonos en el nuero de
legend1 = plt.legend(handles,legend_labels,title="Clusters")
plt.show()

import numpy as np
nuevo_valor=np.array([[12,6]])
x2 =(nuevo_valor-nuevo_valor.mean())/nuevo_valor.std()
#prediccion
clusterVino= modelo.predict(x2)
print("el cluster es:",clusterVino)